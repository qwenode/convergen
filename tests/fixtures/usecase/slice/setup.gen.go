// Code generated by github.com/qwenode/convergen
// DO NOT EDIT.

package slice

type SrcType struct {
    IntSlice    []int
    DataSlice   []Data
    StatusSlice []int
}

type DstType struct {
    IntSlice    []int
    DataSlice   []Data
    StatusSlice []Status
}

type Data struct{}

type Status int

func Copy(src *SrcType) (dst *DstType) {
    dst = &DstType{}
    if src.IntSlice != nil {
        dst.IntSlice = make([]int, len(src.IntSlice))
        copy(dst.IntSlice, src.IntSlice)
    }
    if src.DataSlice != nil {
        dst.DataSlice = make([]Data, len(src.DataSlice))
        for i, e := range src.DataSlice {
            dst.DataSlice[i] = e
        }
    }
    if src.StatusSlice != nil {
        dst.StatusSlice = make([]Status, len(src.StatusSlice))
        for i, e := range src.StatusSlice {
            dst.StatusSlice[i] = Status(e)
        }
    }

    return
}
